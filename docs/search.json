[{"path":"https://tdeswaef.github.io/aquacroponr/articles/example-morris.html","id":"example-morris-method","dir":"Articles","previous_headings":"","what":"Example Morris method","title":"Sensitivity analysis example with Morris method","text":"First run code present vignette(\"example-simulation\"), ensure paths correct scenarios defined. sensitivity analysis using Morris method, made function aquacrop_morris(), built upon sensitivity::morris() function. function designs Morris sampling scheme r trajectories. case used \\(r=20\\), limit computation time, set higher using specific objectives. example chose study effect two parameters cgc rt_max (\\(p =2\\)) two output variables (\\(y = 2\\)) spinach. Using ‘one---time’ design, generate \\((p+1) \\times r\\) simulations, elemental effects calculated (ee variable aquacrop_morris() output). typically multidimensional matrix, melt interpretable dataframe using ee_to_dataframe() function, built upon reshape2::melt() function. information, please check sensitivity::morris() function, used basis aquacrop_morris() function. First run Morris method using aquacrop_morris() function: Now tibble following columns: elemental effects combination trajectory (traject - \\(r = 20\\)), parameter (par - \\(p = 2\\)), simulation time (DAP - \\(t = 70\\)), output variable (outvar - \\(y = 2\\)) scenario (Scenario - \\(s = 2\\)): \\(n = r \\times p \\times t \\times y \\times s = 11200\\). actual length data frame can smaller trajectories rejected, identical. default, elemental effects (ee) scaled parameter value. make proper comparisons sensitivity across output variables, also scaled dividing representative value respective output variable. example calculate scaler based 95% highest value simulations done aquacrop_morris() function variable. also choose e.g. median value (50%) instead 95% value. scaling parameter value already done aquacrop_morris() function (based parameter ranges provide), don’t need representative value .  output elemental effects generated third trajectory. immediately see pattern (.e. sensitivity function) different output variables importance maximum rooting depth (rt_max) higher scenario S_02, later irrigation event (see vignette(“example-simulation”)). aggregate results level want. level aggregate indicated group_by() statement. want rank parameters integrated impact two output variables group par:  want see effect output variable separately, add outvar group_by() statement:  can also check sensitivity depends scenario: see especially maximum rooting depth effect changes scenario. Finally, can look time series sensitivity. Therefore, also group DAP:","code":"p <- aquacrop_morris(situation = c(\"S_01\", \"S_02\"),                      backgroundpar=Spinach,                       cycle_length = 70,                       r = 20,                       binf=c(rt_max = 0.12, cgc = 0.1),                       bsup = c(rt_max = 0.55, cgc = 0.21),                       outvars = c(\"Biomass\", \"CC\"))  EE <- ee_to_dataframe(p = p, situation = c(\"S_01\", \"S_02\"), cycle_length = 70) #> [1] \"traject\"  \"par\"      \"DAP\"      \"outvar\"   \"ee\"       \"Scenario\" library(reshape2) scaler <- melt(data = p$y, value.name = \"value\", varnames = c(\"simno\", \"DAP\", \"outvar\")) %>%    group_by(outvar) %>%   summarize(yscale= quantile(value, 0.95))  EE <- EE %>%   left_join(scaler, by = \"outvar\") %>%   mutate(ee_scaled = ee/yscale)  ggplot(EE %>% filter(traject == 3)) +   facet_wrap(facets = vars(outvar), nrow = 2) +   geom_line(aes(x=DAP, y=ee_scaled, color = par, linetype = Scenario), linewidth = 1) +   theme_bw() mu_star1 <- EE %>%   group_by(par) %>%   summarise(mu = mean(ee_scaled),             mu_star = mean(abs(ee_scaled)),             sigma = sd(ee_scaled))  ggplot(mu_star1) +   theme_bw() +   geom_point(aes(x=par, y=mu_star)) mu_star2 <- EE %>%   group_by(par, outvar) %>%   summarise(mu = mean(ee_scaled),             mu_star = mean(abs(ee_scaled)),             sigma = sd(ee_scaled))  ggplot(mu_star2) +   facet_wrap(facets = vars(outvar), nrow=2) +   theme_bw() +   geom_point(mapping = aes(x=par, y=mu_star)) mu_star3 <- EE %>%    group_by(par, outvar, Scenario) %>%   summarise(mu = mean(ee_scaled),             mu_star = mean(abs(ee_scaled)),             sigma = sd(ee_scaled))  ggplot(mu_star3) +   facet_wrap(facets = vars(outvar), nrow=2) +   theme_bw() +   geom_point(mapping = aes(x=par, y=mu_star, color = Scenario)) mu_star4 <- EE %>%    group_by(par, outvar, Scenario, DAP) %>%   summarise(mu = mean(ee_scaled),             mu_star = mean(abs(ee_scaled)),             sigma = sd(ee_scaled))  ggplot(mu_star4) +   facet_wrap(facets = vars(outvar, Scenario), nrow = 3) +   geom_point(mapping = aes(x=DAP, y=mu_star, group=par, color=par))+   theme_bw()"},{"path":"https://tdeswaef.github.io/aquacroponr/articles/example-simulation.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Simulation Example for Spinach","text":"basic example run AquaCrop R spinach crop. Importantly, working directory set folder aquacrop.exe file located. path also contain spaces. example: path_to_aquacrop_folder <- \"C:/users/username/AquaCrop71/\". package comes example list default crop parameters quinoa spinach. make list crop, need AquaCrop cropfile (YourCrop.CRO) whose path input read_CRO() function: list default crop parameter values, can design scenario’s want run AquaCrop. AquacropOnR package provides function design scenario’s: design_scenario(). arguments function following meaning: name character vector names scenario’s. Input_Date Date vector indicates start point meteo files (Plu, Tnx, ETo) Plant_Date Date vector defines planting date scenario IRRI character vector names irrigation scenario’s present ID column IRRI_s tibble. Soil character vector names soils present ID column SOL_s tibble. Plu, Tnx, ETo character (vectors) refer names R objects, hold daily data precipitation, temperature reference evapotranspiration, respectively. IMPORTANT: Scenario_s tibble must named Scenario_s must columns (variables) Scenario, Input_Date, Plant_Date, IRRI, Soil Meteo. irrigation tibble must named IRRI_s must columns ID, Timing, Depth ECw. Values ID column given input IRRI argument design_scenario() function. soil tibble must named SOL_s must columns ID, Horizon, Thickness, SAT, FC, WP, Ksat, Penetrability Gravel. Values ID column given input Soil argument design_scenario() function. precipitation tibble can named want, name input Plu argument design_scenario() function. tibble must columns DAY PLU. reference evapotranspiration tibble can named want, name input ETo argument design_scenario() function. tibble must columns DAY ETo. temperature tibble can named want, name input Tnx argument design_scenario() function. tibble must columns DAY, TMAX TMIN. Examples tibbles available package. Scenario_s tibble look like : can make irrigation input tibble follows: example use data soil, precipitation, temperature reference evapotranspiration comes package. tibbles formatted presented . crucial create correct AquaCrop path, checking required folders choosing daily outputs produce. Therefore package function path_config(). Make sure path ends “/”. example: path_to_aquacrop_folder <- \"C:/users/username/AquaCrop71/\". Daily_output argument lets choose output type return simulation (see Codes AquaCrop manual p21-25). Currently function tested Daily_output = c(1,2). Finally, can run AquaCrop using aquacrop_wrapper() function display plot. param_values argument used modify crop parameters default, list provided input defaultpar argument inside model_options list. situation takes vector characters, correspond Scenario variable Scenario_s tibble. Let us first run simulation default parameters spinach:  now let’s see happens increase canopy growth coefficient cgc 0.15 0.18:  list parameters explanation can found vignette(\"crop-parameters\").","code":"library(AquacropOnR) library(tidyverse) setwd(dir = path_to_aquacrop_folder) yourcrop <- read_CRO(\"path/YourCrop.CRO\")` Scenario_s <- design_scenario(name = c(\"S_01\", \"S_02\"),                               Input_Date = as.Date(\"2019-01-01\"),                               Plant_Date = as.Date(\"2019-04-01\"),                                IRRI = c(\"IRRI_01\", \"IRRI_02\"),                               Soil = \"Soil_01\",                                Plu = \"Plu_01\",                               Tnx = \"Tnx_01\",                               ETo = \"ETo_01\") #> # A tibble: 2 × 8 #>   Scenario Input_Date Plant_Date IRRI    Soil    Plu    Tnx    ETo    #>   <chr>    <date>     <date>     <chr>   <chr>   <chr>  <chr>  <chr>  #> 1 S_01     2019-01-01 2019-04-01 IRRI_01 Soil_01 Plu_01 Tnx_01 ETo_01 #> 2 S_02     2019-01-01 2019-04-01 IRRI_02 Soil_01 Plu_01 Tnx_01 ETo_01 IRRI_s <- tibble(ID = c(\"IRRI_01\", \"IRRI_02\"), Timing = c(20, 50), Depth = c(25,25), ECw = c( 0, 0)) IRRI_s #> # A tibble: 2 × 4 #>   ID      Timing Depth   ECw #>   <chr>    <dbl> <dbl> <dbl> #> 1 IRRI_01     20    25     0 #> 2 IRRI_02     50    25     0 #> # A tibble: 1 × 9 #>   ID      Horizon Thickness   SAT    FC    WP  Ksat Penetrability Gravel #>   <chr>     <dbl>     <dbl> <dbl> <dbl> <dbl> <dbl>         <dbl>  <dbl> #> 1 Soil_01       1         4    41    22    10  1200           100      0 #> # A tibble: 6 × 2 #>     DAY   PLU #>   <dbl> <dbl> #> 1     1   0.4 #> 2     2   0.7 #> 3     3   0.8 #> 4     4   0.2 #> 5     5   0   #> 6     6   0.3 #> # A tibble: 6 × 3 #>     DAY  TMAX  TMIN #>   <dbl> <dbl> <dbl> #> 1     1   9.3   7.2 #> 2     2   7.4   5   #> 3     3   6.8   2.1 #> 4     4   6.5   2.5 #> 5     5   6.5   2.9 #> 6     6   7.4   4.3 #> # A tibble: 6 × 2 #>     DAY   ETo #>   <dbl> <dbl> #> 1     1 1.03  #> 2     2 1.17  #> 3     3 0.743 #> 4     4 0.887 #> 5     5 0.778 #> 6     6 0.695 AQ <- path_config(AquaCrop.path = path_to_aquacrop_folder, Daily_output = c(1,2)) default <- aquacrop_wrapper(param_values = list(),                situation = c(\"S_01\",\"S_02\"),                cycle_length = 70,                model_options = list(AQ = AQ, defaultpar = Spinach, output = \"morris\"))  ggplot(mapping = aes(x=DAP, y=Biomass)) +   ylim(0, 3.5) +   geom_line(data = default, aes(group = Scenario, color = Scenario),linewidth = 1) +   geom_text(aes(x=40, y=3, label = 'default'), color = \"black\") +   xlim(0, 70) +   scale_color_manual(values = c(\"black\", \"red\")) +   theme_bw() modified <- aquacrop_wrapper(param_values = list(cgc = 0.18),                situation = c(\"S_01\", \"S_02\"),                cycle_length = 70,                model_options = list(AQ = AQ, defaultpar = Spinach, output = \"def\"))  ggplot() +   ylim(0, 3.5) +   geom_line(data = default, aes(x=DAP, y=Biomass, group = Scenario, color = Scenario),linewidth = 1) +   geom_line(data = modified, aes(x=DAP, y=Biomass, group = Scenario, color = Scenario),linewidth = 1, linetype = 2) +   geom_text(aes(x=40, y=3, label = 'default'), color = \"black\", hjust = 0) +   geom_text(aes(x=40, y=2.8, label = 'modified'), color = \"black\", hjust = 0) +   geom_segment(mapping = aes(x = 34, xend = 39, y = 3, yend = 3), color = 'black', linewidth = 1, linetype = 1) +   geom_segment(mapping = aes(x = 34, xend = 39, y = 2.8, yend = 2.8), color = 'black', linewidth = 1, linetype = 2) +   xlim(0, 70) +   scale_color_manual(values = c(\"black\", \"red\")) +   theme_bw()"},{"path":"https://tdeswaef.github.io/aquacroponr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tom De Swaef. Author, maintainer.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"De Swaef T (2024). AquacropOnR: Function collection using AquaCrop R. R package version 0.1.0, https://tdeswaef.github.io/aquacroponr/.","code":"@Manual{,   title = {AquacropOnR: Function collection for using AquaCrop from R},   author = {Tom {De Swaef}},   year = {2024},   note = {R package version 0.1.0},   url = {https://tdeswaef.github.io/aquacroponr/}, }"},{"path":"https://tdeswaef.github.io/aquacroponr/Cropparameters.html","id":null,"dir":"","previous_headings":"","what":"Model parameter explanation","title":"Model parameter explanation","text":"table lists crop parameters can adjusted aquacrop_wrapper() function. Please refer AquaCrop manual better understanding conservative parameters.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/index.html","id":"aquacroponr","dir":"","previous_headings":"","what":"Function collection for using AquaCrop from R","title":"Function collection for using AquaCrop from R","text":"goal AquacropOnR make AquaCrop simulations within R easy possible. package currently tested AquaCrop standalone version 7.0 Windows. recent version can downloaded FAO website.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/index.html","id":"installation-and-setup","dir":"","previous_headings":"","what":"Installation and setup","title":"Function collection for using AquaCrop from R","text":"First install git. can install development version AquacropOnR using devtools package: installation AquaCrop standalone version required.","code":"library(devtools) devtools::install_git(url = \"https://github.com/tdeswaef/aquacroponr.git\", force = TRUE)"},{"path":"https://tdeswaef.github.io/aquacroponr/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Function collection for using AquaCrop from R","text":"definition AquaCrop wrapper function aquacrop_wrapper allow option run AquaCrop growing degree days instead days include code running sensitivity analysis using morris method","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 AquaCropR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/AquacropOnR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"AquacropOnR: Function collection for using AquaCrop from R — AquacropOnR-package","title":"AquacropOnR: Function collection for using AquaCrop from R — AquacropOnR-package","text":"package provides wrappers using AquaCrop within R simple possible. work inspired earlier initiatives APSIM (ApsimOnR) STICS (SticsOnR) crop models. , package aims intercface AquaCRop CroptimizR package.","code":""},{"path":[]},{"path":"https://tdeswaef.github.io/aquacroponr/reference/AquacropOnR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AquacropOnR: Function collection for using AquaCrop from R — AquacropOnR-package","text":"Maintainer: Tom De Swaef tom.deswaef@ilvo.vlaanderen.(ORCID)","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_morris.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper function for running a sensitivity analysis for AquaCrop using the morris method — aquacrop_morris","title":"A wrapper function for running a sensitivity analysis for AquaCrop using the morris method — aquacrop_morris","text":"aquacrop_morris operates 5 steps: Define morris design terms parameters, parameter ranges, trajectories method. See also morris function sensitivity package. Run AquaCrop model parameter combinations morris design. Choose level integration: model time steps, different variables Make array correct dimensions based simulations (step 2) integration level (step 3). tell array morris design step 1.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_morris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper function for running a sensitivity analysis for AquaCrop using the morris method — aquacrop_morris","text":"","code":"aquacrop_morris(   situation = \"S_01\",   cycle_length,   backgroundpar = Spinach,   r = r,   binf = c(),   bsup = c(),   design = list(type = \"oat\", levels = 8, grid.jump = 1),   outvars = c(\"Biomass\") )"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_morris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper function for running a sensitivity analysis for AquaCrop using the morris method — aquacrop_morris","text":"situation character string vector scenarios run backgroundpar reference parameter set (made read_CRO) r number trajectories morris algorithm binf named vector lower boundaries parameter ranges bsup named vector upper boundaries parameter ranges design list designing morris algorithm outvars character vector output variable names sensitivity analysis","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_morris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper function for running a sensitivity analysis for AquaCrop using the morris method — aquacrop_morris","text":"list class morris, containing input arguments, plus following components: call: matched call X data.frame containing design experiments (parameter value combinations) y either vector, matrix three-dimensional array model responses (depends output model) ee: y vector: \\((r \\times p)\\) - matrix elementary effects factors. y matrix: \\((r \\times p \\times ncol(y))\\) - array elementary effects factors columns y. y three-dimensional array: \\((r \\times p \\times dim(y)[2] \\times dim(y)[3])\\) - array elementary effects factors elements second third dimension y.","code":""},{"path":[]},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_morris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper function for running a sensitivity analysis for AquaCrop using the morris method — aquacrop_morris","text":"","code":"Scenario_s <- design_scenario(name = \"S_01\",     Plant_Date = as.Date(\"2019-04-01\"),     IRRI = \"IRRI_01\",     Soil = \"Soil_01\",     Plu = \"Plu_01\",     Tnx = \"Tnx_01\",     ETo = \"ETo_01\") #> Error in length_check_fun(Input_Date, no_scenarios): argument \"Input_Date\" is missing, with no default  p <- aquacrop_morris(situation = \"S_01\", backgroundpar=Spinach, r = 20, binf=c(rt_max = 0.12, cgc = 0.1), bsup = c(rt_max = 0.55, cgc = 0.21), outvars = c(\"Biomass\", \"YSdryS\")) #> Warning: keeping 19 repetitions out of 20 #> Error in map(., function(i) aquacrop_wrapper(param_values = mo$X[i, ],     situation = situation, cycle_length = cycle_length, model_options = list(AQ = AQ,         defaultpar = backgroundpar, output = \"morris\")) %>% dplyr::mutate(x = i)): ℹ In index: 1. #> Caused by error in `aquacrop_wrapper()`: #> ! set your working directory to the AquaCrop.path"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper function for running AquaCrop for use in CroptimizR package — aquacrop_wrapper","title":"A wrapper function for running AquaCrop for use in CroptimizR package — aquacrop_wrapper","text":"aquacrop_wrapper takes parameter values input AquaCrop simulation returns result list requested CroptimizR package.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper function for running AquaCrop for use in CroptimizR package — aquacrop_wrapper","text":"","code":"aquacrop_wrapper(   param_values = list(),   situation = \"S_01\",   cycle_length,   model_options = list(AQ = AQ, defaultpar = Spinach, output = \"croptimizr\"),   ... )"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper function for running AquaCrop for use in CroptimizR package — aquacrop_wrapper","text":"param_values list crop parameters modify default situation character vector scenario names listed Scenario_s tibble cycle_length integer representing length simulation period days model_options list model options: AQ aquacrop path generated path_config function, defaultpar default parameter list designed read_CRO function output defines shape output returned.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper function for running AquaCrop for use in CroptimizR package — aquacrop_wrapper","text":"dataframe list (model_options$output = 'croptimizr') daily outputs AquaCrop, concatenated different scenario's.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/aquacrop_wrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper function for running AquaCrop for use in CroptimizR package — aquacrop_wrapper","text":"","code":"y <- aquacrop_wrapper(param_values = params,                      model_options = list(AQ=AQ, defaultpar=Spinach, output = \"df\")) #> Error in aquacrop_wrapper(param_values = params, model_options = list(AQ = AQ,     defaultpar = Spinach, output = \"df\")): set your working directory to the AquaCrop.path"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/design_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes the required tibble that is used as scenario argument in the solve_AquaCrop() function. — design_scenario","title":"Makes the required tibble that is used as scenario argument in the solve_AquaCrop() function. — design_scenario","text":"Makes required tibble used scenario argument solve_AquaCrop() function.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/design_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes the required tibble that is used as scenario argument in the solve_AquaCrop() function. — design_scenario","text":"","code":"design_scenario(name, Input_Date, Plant_Date, IRRI, Soil, Plu, Tnx, ETo)"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/design_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes the required tibble that is used as scenario argument in the solve_AquaCrop() function. — design_scenario","text":"name character vector names scenarios. Input_Date Date format vector initial input dates different scenarios Plant_Date Date format vector planting dates different scenarios IRRI character vector names Irrigation tibble(s) Soil character vector names Soil tibble(s) Plu character vector names Precipitation tibble(s) Tnx character vector names Temperature tibble(s) ETo character vector names Reference Evapotranspiration tibble(s)","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/design_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes the required tibble that is used as scenario argument in the solve_AquaCrop() function. — design_scenario","text":"tibble different scenarios run AquaCrop","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/ee_to_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform the elemental effects array into a tibble — ee_to_dataframe","title":"Transform the elemental effects array into a tibble — ee_to_dataframe","text":"ee_to_dataframe takes morris output transforms 4-dimensional elemental effects array useful tibble","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/ee_to_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform the elemental effects array into a tibble — ee_to_dataframe","text":"","code":"ee_to_dataframe(p, situation, cycle_length)"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/ee_to_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform the elemental effects array into a tibble — ee_to_dataframe","text":"p output aquacrop_morris function situation situations listed aquacrop_morris() function cycle_length cycle_length parameter aquacrop_morris() function","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/ee_to_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform the elemental effects array into a tibble — ee_to_dataframe","text":"tibble 6 variables: traject, par, DAP, outvar, ee Scenario","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/ee_to_dataframe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform the elemental effects array into a tibble — ee_to_dataframe","text":"resulting tibble 6 variables: traject: refers trajectory number Morris design par: parameters sensitivity evaluated DAP: Days Planting simulation save time series outvar: output variables sensitivity evaluated ee: elemental effects output aquacrop_morris() function. elemental effects scaled parameter range (see sensitivity::morris()). Scenario: scenarios simulation done","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/path_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup of AquaCrop path — path_config","title":"Setup of AquaCrop path — path_config","text":"Returns correct AquaCrop.exe path, checking required folder structure. aware working directory set folder aquacrop.exe file located (setwd()).","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/path_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup of AquaCrop path — path_config","text":"","code":"path_config(AquaCrop.path, Daily_output = c(1, 2))"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/path_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup of AquaCrop path — path_config","text":"AquaCrop.path character name folder aquacrop.exe file located Daily_output vector integers defining daily outputs AquaCrop produce. empty vector results daily outputs. Defaults c(1,2).","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/path_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup of AquaCrop path — path_config","text":"character name path aquacrop.exe file, also writes DailyResults.SIM file appropriate folder. file","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/plotinput.html","id":null,"dir":"Reference","previous_headings":"","what":"plot the the input data for quality control — plotinput","title":"plot the the input data for quality control — plotinput","text":"plotinput() takes scenario tibble input, checks whether scenario tibble correctly designed, required data correctly loaded. successful, produces ggplot visualization input data","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/plotinput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot the the input data for quality control — plotinput","text":"","code":"plotinput(Scenario_s)"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/plotinput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot the the input data for quality control — plotinput","text":"Scenario_s tibble designed scenarios (designed design_scenario())","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/plotinput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot the the input data for quality control — plotinput","text":"ggplots input data (RStudio: check 'Plots' tab) tables irrigation soils (RStudio: check 'Viewer' tab)","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/plotinput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot the the input data for quality control — plotinput","text":"","code":"plotinput(Scenario_s) #> Error in gt(.): could not find function \"gt\""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/read_CRO.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a .CRO file and return it as a list — read_CRO","title":"Read a .CRO file and return it as a list — read_CRO","text":"Read .CRO file return list","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/read_CRO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a .CRO file and return it as a list — read_CRO","text":"","code":"read_CRO(default_crop)"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/read_CRO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a .CRO file and return it as a list — read_CRO","text":"default_crop file path .CRO file read.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/read_CRO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a .CRO file and return it as a list — read_CRO","text":"named list crop parameter name-value pairs.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/read_CRO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a .CRO file and return it as a list — read_CRO","text":"crop file required AquaCrop 7.0 higher requires 83 lines content. Crop files generated using previous AquaCrop versions, typically contain less lines (76). read_CRO function detects whether file sufficient length, complements file needed.","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/solve_AquaCrop.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper function for running AquaCrop — solve_AquaCrop","title":"A wrapper function for running AquaCrop — solve_AquaCrop","text":"solve_AquaCrop takes parameter values input AquaCrop simulation returns dataframe output","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/solve_AquaCrop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper function for running AquaCrop — solve_AquaCrop","text":"","code":"solve_AquaCrop(croppar, defaultpar, scenario_s, AQ)"},{"path":"https://tdeswaef.github.io/aquacroponr/reference/solve_AquaCrop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper function for running AquaCrop — solve_AquaCrop","text":"croppar list crop parameters modify default defaultpar list default parameter values scenario_s character vector scenario names listed Scenario_s tibble","code":""},{"path":"https://tdeswaef.github.io/aquacroponr/reference/solve_AquaCrop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper function for running AquaCrop — solve_AquaCrop","text":"dataframe daily outputs AquaCrop, concatenated different scenario's.","code":""}]
